setwd("~/Dropbox/My Data")
x <- "name"; Lst[[x]]
Lst <- list(name="Fred", wife="Mary", no.children=3,
child.ages=c(4,7,9))
Lst
a <- ('hello' 'ness')
a <- c('hello','ness')
a
a[1]
a[2]
dim(a)
length(a)
length.a<-length(a)
?rbinom
rbinom(10,1,0.5)
rbinom(1,1,0.5)
rbinom(1,10,0.5)
a
a[0]
a[1]
a[2]
seq(1,5)
seq(1,0)
seq(1,1)
seq(1,2)
seq(1,1)
seq(4,1)
deck<-seq(1,52)
deck
library('Card Shuffling/carshuffling.r')
source('Card Shuffling/carshuffling.r')
heap.shuffle(deck)
heap.shuffle(deck)
source('Card Shuffling/carshuffling.r')
heap.shuffle(deck)
heap.shuffle(deck)
heap.shuffle(deck)
heap.shuffle(deck)
source('Card Shuffling/carshuffling.r')
heap.shuffle(deck)
heap.shuffle(3)
deck
heap.shuffle(deck)
source('Card Shuffling/carshuffling.r')
addness(1.2)
addness(1,2)
heap.shuffle(deck)
deck[2]
deck.size<-length(deck)
cut.point<-rbinom(1,deck.size-1,(0.5^deck.size))
deck.cut.one.indicies<-seq(1,cut.point)
deck.cut.two.indicies<-seq(cut.point,deck.size)
deck.cut.one.indicies
deck.cut.two.indicies
cut.point<-rbinom(1,deck.size-1,(0.5^deck.size))
cut.point
cut.point<-rbinom(1,deck.size-1,(0.5^deck.size))
cut.point
deck.size
0.5^deck.size
prob0.5^deck.size
prob<-0.5^deck.size
cut.point<-rbinom(1,deck.size-1,prob)
cut.point
rbinom(1,deck.size-1,prob)
rbinom(1,deck.size,prob)
rbinom(1,deck.size,0.5)
rbinom(1,deck.size,0.5)
rbinom(1,deck.size,0.5)
rbinom(1,deck.size,0.5)
rbinom(1,deck.size,prob)
rbinom(1,deck.size,prob)
rbinom(1,deck.size,prob)
rbinom(1,deck.size,prob)
rbinom(1,deck.size,prob)
rbinom(1,deck.size,log(prob),log.p=TRUE)
rbinom(1,deck.size,0.5
)
0.5^deck.size
ln(0.5^deck.size)
log(0.5^deck.size)
log(exp(1))
log(exp(2))
rbinom(1,deck.size,log(prob),log.p=TRUE)
?rbinom
choose(deck.size,10)
choose(deck.size,10)*prob
prob
choose(deck.size,20)*prob
choose(deck.size,25)*prob
choose(deck.size,30)*prob
deck.size
choose(deck.size,26)*prob
choose(deck.size,1)*prob
choose(10,1)*(1/2)^10
choose(10,1)*(1/5)^10
choose(10,1)*(1)^10
choose(10,1)*(0.9)^10
choose(10,1)*(1.1)^10
choose(10,1)*(1/3)^10
choose(10,1)*(3/4)^10
for i in (0:k)
for (i in 0:k){}
?DiscreteDistribution
library('DiscreteDistribution )
''
'
library('DiscreteDistribution')
get.package('DiscreteDistribution')
install.package('DiscreteDistribution')
install.packages('DiscreteDistribution')
library('distrib')
install.packages('distrib')
install.packages('heR.Misc')
?sample
?apply
seq(0,10)
apply(seq(0,10),choose(10,x))
apply(seq(0,10),choose(10,2,x))
apply(seq(0,10),2,choose(10,x))
sequence<-seq(0,10)
apply(sequence,2,choose(10,x))
apply(sequence,2,choose(10,2))
apply(sequence,2,'choose(10,x)')
apply(sequence,2,'choose')
apply(sequence,2,choose)
apply(sequence,2,choose(x))
apply(sequence,2,choose(x),3)
apply(sequence,2,choose(x,1))
apply(sequence,2,sum
)
apply(sequence,2,sum)
apply(sequence,2,mean)
?poisson
apply(sequence,2,poisson(0.5,3))
apply(sequence,2,poisson(0.5,x))
?lapply
apply(sequence,mean)
lapply(sequence,mean)
lapply(sequence,chose)
lapply(sequence,choose)
lapply(sequence,choose(x,2))
lapply(sequence,choose
)
choose(10,1:10)
choose(10,0:10)*(1/2)^10
setwd("~/Dropbox/My Data")
source("./carshuffling.r")
setwd("~/Dropbox/My Data/Card Shuffling")
source("./carshuffling.r")
Bayer.Diaconis.coefficients(10)
Bayer.Diaconis.coefficients(12)
Bayer.Diaconis.coefficients(40)
Bayer.Diaconis.coefficients(40)
source("./carshuffling.r")
Bayer.Diaconis.coefficients(40)
sample(0:40,Bayer.Diaconis.coefficients(40))
?sample
sample(0:40,1,replace=true,prob=Bayer.Diaconis.coefficients(40))
sample(0:40,1,replace=TRUE,prob=Bayer.Diaconis.coefficients(40))
sample(0:40,1,replace=TRUE,prob=Bayer.Diaconis.coefficients(40))
sample(0:40,1,replace=TRUE,prob=Bayer.Diaconis.coefficients(40))
sample(0:40,1,replace=TRUE,prob=Bayer.Diaconis.coefficients(40))
sample(0:40,1,replace=TRUE,prob=Bayer.Diaconis.coefficients(40))
sample(0:40,1,replace=TRUE,prob=Bayer.Diaconis.coefficients(40))
sample(0:40,1,replace=TRUE,prob=Bayer.Diaconis.coefficients(40))
source("./carshuffling.r")
source("./carshuffling.r")
Bayer.Diaconis.split(40)
Bayer.Diaconis.split(40)
Bayer.Diaconis.split(40)
Bayer.Diaconis.split(40)
Bayer.Diaconis.split(40)
Bayer.Diaconis.split(40)
Bayer.Diaconis.split(14)
Bayer.Diaconis.split(14)
Bayer.Diaconis.split(9)
Bayer.Diaconis.split(6)
Bayer.Diaconis.split(2)
Bayer.Diaconis.split(1)
Bayer.Diaconis.split(2)
Bayer.Diaconis.split(2)
Bayer.Diaconis.split(2)
Bayer.Diaconis.split(2)
Bayer.Diaconis.split(2)
cl
source("./carshuffling.r")
Bayer.Diaconis.split(2)
Bayer.Diaconis.split(2)
Bayer.Diaconis.split(2)
Bayer.Diaconis.split(2)
Bayer.Diaconis.split(2)
source("./carshuffling.r")
Bayer.Diaconis.split(2)
Bayer.Diaconis.split(2)
Bayer.Diaconis.split(2)
source("./carshuffling.r")
Bayer.Diaconis.split(2)
Bayer.Diaconis.split(2)
source("./carshuffling.r")
Bayer.Diaconis.split(2)
Bayer.Diaconis.split(2)
Bayer.Diaconis.split(5)
Bayer.Diaconis.split(5)
Bayer.Diaconis.split(5)
Bayer.Diaconis.split(5)
Bayer.Diaconis.split(1)
deck
split.deck(deck)
split.deck(deck)
split.deck(1:23)
split.deck(1:23)
?function
;
split.deck(1:23)
split.deck(1:23)
?array
?list
split.deck(list(1:23))
source("./carshuffling.r")
split.deck(list(1:23))
split.deck(1:23
)
split.deck(list(1:23))
?length
split.deck(list(1:23))
split.deck(1:23)
split.deck(deck=1:23)
split.deck(deck=1:23)
split.deck(deck=(1:23))
split.deck(deck<-(1:23))
source("./carshuffling.r")
split.deck(deck<-(1:23))
split.deck(deck=1:23)
split.deck(1:23)
split.deck(1:23)
source("./carshuffling.r")
split.deck(1:23)
split.deck(1:23)
source("./carshuffling.r")
split.deck(1:23)
split.deck(1:23)
split.deck(1:23)
split.deck(1:23)
split.deck(1:23)
split.deck(1:23)
split.deck(1:23)
split.deck(1:23)
split.deck(1:23)
split.deck(1:23)
split.deck(1:23)
split.deck(1:23)
split.deck(1:40)
split.deck(deck)
split.deck(deck)
deck
deck=(1:60)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
?list
split.deck(deck)
split.deck(deck)
source("./carshuffling.r")
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
seq(31,30)
seq(31,30)
seq(1,1)
seq(1,2)
split.deck(deck)
source("./carshuffling.r")
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
?rbinom
rbinom(10,3,0.5)
rbinom(40,3,0.5)
rbinom(4,40,0.5)
rbinom(4,40,0.5)
rbinom(4,40,0.5)
rbinom(4,40,0.5)
rbinom(4,40,0.5)
rbinom(4,40,0.5)
rbinom(4,40,0.5)
rbinom(4,40,0.5)
rbinom(4,40,0.5)
rbinom(4,40,0.5)
rbinom(4,40,0.5)
rbinom(4,40,0.5)
rbinom(4,40,0.5)
rbinom(4,40,0.5)
source("./carshuffling.r")
split.deck(deck)
split.deck(deck)
split.deck(deck)
rbinom(4,40,0.5)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
source("./carshuffling.r")
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
split.deck(deck)
source("./carshuffling.r")
heap.shuffle(deck)
heap.shuffle(deck)
heap.shuffle(deck)
heap.shuffle(deck)
heap.shuffle(deck)
heap.shuffle(deck)
?append
append(1:5,10:12)
?length
source("./carshuffling.r")
heap.shuffle(deck)
heap.shuffle(deck)
heap.shuffle(deck)
source("./carshuffling.r")
heap.shuffle(deck)
source("./carshuffling.r")
heap.shuffle(deck)
heap.shuffle(deck)
heap.shuffle(deck)
